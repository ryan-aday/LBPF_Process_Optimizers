import sys
import vtk
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QPushButton, QFileDialog, QWidget, QFrame, QLabel
)
from PyQt5.QtCore import Qt


class CuraLikeSTLManipulator(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Cura-Like STL Manipulator")
        self.setGeometry(100, 100, 1200, 800)

        self.widget = QWidget(self)
        self.setCentralWidget(self.widget)

        # Main Layout
        self.layout = QHBoxLayout(self.widget)

        # Left Control Panel
        self.control_panel = QVBoxLayout()
        self.control_panel.setAlignment(Qt.AlignTop)

        # Add control buttons
        self.load_button = QPushButton("Load STL")
        self.load_button.clicked.connect(self.load_stl)

        self.reset_button = QPushButton("Reset Transformations")
        self.reset_button.clicked.connect(self.reset_transformations)

        self.save_button = QPushButton("Save Transformations")
        self.save_button.clicked.connect(self.save_transformations)

        self.control_panel.addWidget(QLabel("Controls"))
        self.control_panel.addWidget(self.load_button)
        self.control_panel.addWidget(self.reset_button)
        self.control_panel.addWidget(self.save_button)

        # Add separator line
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        self.control_panel.addWidget(line)

        # Add control panel to layout
        self.layout.addLayout(self.control_panel)

        # VTK 3D Viewer
        self.vtk_widget = vtk.vtkRenderWindow()
        self.interactor = vtk.vtkRenderWindowInteractor()
        self.interactor.SetRenderWindow(self.vtk_widget)

        self.renderer = vtk.vtkRenderer()
        self.vtk_widget.AddRenderer(self.renderer)

        # Add build plate
        self.add_build_plate()

        # Set camera position
        self.setup_camera()

        # Add VTK widget to layout
        self.vtk_layout = QVBoxLayout()
        self.vtk_frame = QWidget()
        self.vtk_frame.setLayout(self.vtk_layout)
        self.vtk_layout.addWidget(QWidget.createWindowContainer(self.vtk_widget))
        self.layout.addLayout(self.vtk_layout)

        # Actor management
        self.stl_actors = []  # Keep track of loaded STL actors
        self.transformations = {}  # Store transformations for each actor
        self.selected_actor = None  # Currently selected actor

        # Add selection mechanism
        self.init_selection()

        # Initialize VTK interactor
        self.interactor.Initialize()

    def add_build_plate(self):
        """Add a fixed 600x600x5 build plate to the scene."""
        plate = vtk.vtkCubeSource()
        plate.SetXLength(600)
        plate.SetYLength(600)
        plate.SetZLength(5)

        mapper = vtk.vtkPolyDataMapper()
        mapper.SetInputConnection(plate.GetOutputPort())

        actor = vtk.vtkActor()
        actor.SetMapper(mapper)
        actor.GetProperty().SetColor(0.7, 0.7, 0.7)  # Light gray color
        actor.SetPosition(0, 0, -2.5)

        # Add plate to the renderer (non-selectable)
        self.renderer.AddActor(actor)
        self.build_plate_actor = actor

    def setup_camera(self):
        """Configure the camera to look down at the build plate."""
        camera = vtk.vtkCamera()
        camera.SetPosition(0, 0, 800)  # Position above the build plate
        camera.SetFocalPoint(0, 0, 0)  # Look at the center of the build plate
        camera.SetViewUp(0, 1, 0)  # Align the camera's "up" direction
        self.renderer.SetActiveCamera(camera)
        self.renderer.ResetCameraClippingRange()

    def init_selection(self):
        """Initialize selection and interaction mechanism."""
        self.selector = vtk.vtkPropPicker()

        def on_left_button_press(obj, event):
            click_pos = self.interactor.GetEventPosition()
            self.selector.Pick(click_pos[0], click_pos[1], 0, self.renderer)
            actor = self.selector.GetActor()

            if actor in self.stl_actors:  # Only allow selection of STL actors
                self.selected_actor = actor
                print("Selected actor:", actor)
            else:
                self.selected_actor = None

        def on_mouse_move(obj, event):
            if self.selected_actor:
                mouse_pos = self.interactor.GetEventPosition()
                delta_x, delta_y = mouse_pos[0] - self.start_pos[0], mouse_pos[1] - self.start_pos[1]
                self.start_pos = mouse_pos

                transform = self.transformations[self.selected_actor]
                transform.Translate(delta_x / 100.0, -delta_y / 100.0, 0)
                self.selected_actor.SetUserTransform(transform)
                self.vtk_widget.Render()

        def on_mouse_release(obj, event):
            self.start_pos = None

        self.interactor.AddObserver("LeftButtonPressEvent", on_left_button_press)
        self.interactor.AddObserver("MouseMoveEvent", on_mouse_move)
        self.interactor.AddObserver("LeftButtonReleaseEvent", on_mouse_release)

    def load_stl(self):
        """Load STL file(s)."""
        options = QFileDialog.Options()
        files, _ = QFileDialog.getOpenFileNames(
            self, "Open STL Files", "", "STL Files (*.stl);;All Files (*)", options=options
        )

        if files:
            for stl_file in files:
                # Load STL
                reader = vtk.vtkSTLReader()
                reader.SetFileName(stl_file)

                # Map STL to actor
                mapper = vtk.vtkPolyDataMapper()
                mapper.SetInputConnection(reader.GetOutputPort())

                actor = vtk.vtkActor()
                actor.SetMapper(mapper)

                # Apply default transformation
                transform = vtk.vtkTransform()
                actor.SetUserTransform(transform)

                # Add to scene
                self.renderer.AddActor(actor)
                self.renderer.ResetCamera()
                self.vtk_widget.Render()

                # Track actor and transformation
                self.stl_actors.append(actor)
                self.transformations[actor] = transform

    def reset_transformations(self):
        """Reset transformations for the selected actor."""
        if self.selected_actor:
            transform = vtk.vtkTransform()
            self.selected_actor.SetUserTransform(transform)
            self.transformations[self.selected_actor] = transform
            self.vtk_widget.Render()

    def save_transformations(self):
        """Save transformations for all actors to a file."""
        save_file, _ = QFileDialog.getSaveFileName(
            self, "Save Transformations", "", "Text Files (*.txt);;All Files (*)"
        )

        if save_file:
            with open(save_file, "w") as file:
                for actor, transform in self.transformations.items():
                    matrix = transform.GetMatrix()
                    matrix_values = [matrix.GetElement(i, j) for i in range(4) for j in range(4)]
                    file.write(f"Actor {actor}:\n")
                    file.write(" ".join(map(str, matrix_values)) + "\n")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = CuraLikeSTLManipulator()
    window.show()
    sys.exit(app.exec_())
