import sys
import vtk
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QPushButton, QFileDialog, QWidget, QTextEdit


class STLViewer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Interactive Multi-STL Manipulator")
        self.setGeometry(100, 100, 1000, 800)

        self.widget = QWidget(self)
        self.setCentralWidget(self.widget)

        self.layout = QVBoxLayout(self.widget)

        # VTK Renderer
        self.vtk_widget = vtk.vtkRenderWindow()
        self.interactor = vtk.vtkRenderWindowInteractor()
        self.interactor.SetRenderWindow(self.vtk_widget)

        self.renderer = vtk.vtkRenderer()
        self.vtk_widget.AddRenderer(self.renderer)

        # Real-time transformation logging
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)

        self.transformations = {}  # Store transformations by actor
        self.stl_actors = []  # Keep track of STL actors
        self.build_plate_actor = None  # Store the build plate actor

        # Add buttons
        self.load_button = QPushButton("Load STL", self)
        self.load_button.clicked.connect(self.load_stl)

        self.save_transform_button = QPushButton("Save Transformations", self)
        self.save_transform_button.clicked.connect(self.save_transformations)

        # Add everything to layout
        self.layout.addWidget(self.load_button)
        self.layout.addWidget(self.save_transform_button)
        self.layout.addWidget(self.log_text)

        # Link vtk render window to the PyQt layout
        self.vtk_layout = QVBoxLayout()
        self.vtk_frame = QWidget()
        self.vtk_frame.setLayout(self.vtk_layout)

        self.layout.addWidget(self.vtk_frame)
        self.vtk_layout.addWidget(QWidget.createWindowContainer(self.vtk_widget))

        # Add build plate to renderer
        self.add_build_plate()

        # Selection and interaction
        self.selected_actor = None
        self.start_pos = None
        self.dragging = False
        self.rotating = False
        self.init_selection()

        # Enable mouse interactivity
        self.interactor.Initialize()

    def add_build_plate(self):
        """Add a fixed 600x600x6 build plate to the scene."""
        plate = vtk.vtkCubeSource()
        plate.SetXLength(600)
        plate.SetYLength(600)
        plate.SetZLength(6)

        mapper = vtk.vtkPolyDataMapper()
        mapper.SetInputConnection(plate.GetOutputPort())

        actor = vtk.vtkActor()
        actor.SetMapper(mapper)
        actor.GetProperty().SetColor(0.7, 0.7, 0.7)  # Light gray color
        actor.SetPosition(0, 0, -3)  # Center the plate

        self.renderer.AddActor(actor)
        self.build_plate_actor = actor

    def init_selection(self):
        """Initialize selection mechanism."""
        self.selector = vtk.vtkPropPicker()

        def on_left_button_press(obj, event):
            self.start_pos = self.interactor.GetEventPosition()
            self.selector.Pick(self.start_pos[0], self.start_pos[1], 0, self.renderer)
            actor = self.selector.GetActor()

            # Only allow selection of STL actors, not the build plate
            if actor in self.stl_actors:
                self.selected_actor = actor
                self.log_text.append("Selected new part.")
            elif actor == self.build_plate_actor:
                self.selected_actor = None
                self.log_text.append("Cannot move the build plate.")
            else:
                self.selected_actor = None

            self.dragging = True

        def on_left_button_release(obj, event):
            self.dragging = False

        def on_right_button_press(obj, event):
            self.start_pos = self.interactor.GetEventPosition()
            self.rotating = True

        def on_right_button_release(obj, event):
            self.rotating = False

        def on_mouse_move(obj, event):
            if self.selected_actor and self.start_pos:
                end_pos = self.interactor.GetEventPosition()
                delta_x = end_pos[0] - self.start_pos[0]
                delta_y = end_pos[1] - self.start_pos[1]
                self.start_pos = end_pos

                transform = self.transformations.get(self.selected_actor)
                if self.dragging:
                    transform.Translate(delta_x / 100.0, -delta_y / 100.0, 0)
                elif self.rotating:
                    transform.RotateWXYZ(delta_x, 0, 1, 0)
                    transform.RotateWXYZ(delta_y, 1, 0, 0)

                self.selected_actor.SetUserTransform(transform)
                self.vtk_widget.Render()
                self.log_transformation(self.selected_actor, transform)

        self.interactor.AddObserver("LeftButtonPressEvent", on_left_button_press)
        self.interactor.AddObserver("LeftButtonReleaseEvent", on_left_button_release)
        self.interactor.AddObserver("RightButtonPressEvent", on_right_button_press)
        self.interactor.AddObserver("RightButtonReleaseEvent", on_right_button_release)
        self.interactor.AddObserver("MouseMoveEvent", on_mouse_move)

    def load_stl(self):
        # Select STL file(s)
        options = QFileDialog.Options()
        files, _ = QFileDialog.getOpenFileNames(
            self, "Open STL Files", "", "STL Files (*.stl);;All Files (*)", options=options
        )

        if files:
            for stl_file in files:
                # Read STL
                reader = vtk.vtkSTLReader()
                reader.SetFileName(stl_file)

                # Map STL to actor
                mapper = vtk.vtkPolyDataMapper()
                mapper.SetInputConnection(reader.GetOutputPort())

                actor = vtk.vtkActor()
                actor.SetMapper(mapper)

                # Apply default transformation (center at origin)
                transform = vtk.vtkTransform()
                transform.Translate(0, 0, 0)  # Center at origin
                actor.SetUserTransform(transform)

                # Add bounding box visualization
                self.add_bounding_box(actor)

                # Add to renderer
                self.renderer.AddActor(actor)
                self.renderer.ResetCamera()
                self.vtk_widget.Render()

                # Save transformation data and track the actor
                self.transformations[actor] = transform
                self.stl_actors.append(actor)

                # Log file loaded
                self.log_text.append(f"Loaded STL: {stl_file}")

    def add_bounding_box(self, actor):
        """Add a bounding box around the STL actor."""
        bounds = actor.GetBounds()
        box = vtk.vtkCubeSource()
        box.SetBounds(bounds)

        mapper = vtk.vtkPolyDataMapper()
        mapper.SetInputConnection(box.GetOutputPort())

        box_actor = vtk.vtkActor()
        box_actor.SetMapper(mapper)
        box_actor.GetProperty().SetColor(1, 0, 0)  # Red bounding box
        box_actor.GetProperty().SetLineWidth(2)
        box_actor.GetProperty().SetRepresentationToWireframe()

        self.renderer.AddActor(box_actor)

    def log_transformation(self, actor, transform):
        """Log transformation changes in real-time."""
        matrix = transform.GetMatrix()
        position = actor.GetPosition()
        rotation = [matrix.GetElement(0, 0), matrix.GetElement(1, 1), matrix.GetElement(2, 2)]
        self.log_text.append(f"Actor: {actor}\nPosition: {position}, Rotation: {rotation}")

    def save_transformations(self):
        """Save transformations for all STL files."""
        save_file, _ = QFileDialog.getSaveFileName(
            self, "Save Transformations", "", "Text Files (*.txt);;All Files (*)"
        )

        if save_file:
            with open(save_file, 'w') as f:
                for actor, transform in self.transformations.items():
                    matrix = transform.GetMatrix()
                    matrix_values = [matrix.GetElement(i, j) for i in range(4) for j in range(4)]
                    f.write(f"Actor: {actor}\n")
                    f.write(" ".join(map(str, matrix_values)) + "\n")

            self.log_text.append("Transformations saved!")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = STLViewer()
    window.show()
    sys.exit(app.exec_())
